'use client'

import { useEffect, useState } from 'react'
import { useParams, useRouter } from 'next/navigation'
import { doc, getDoc, updateDoc, arrayUnion, arrayRemove, setDoc } from 'firebase/firestore'
import { db } from '@/lib/firebase'
import { useAuthUser } from '@/hooks/useAuthUser'
import { toast } from 'react-toastify'

interface Movie {
  id: string
  title: string
  year: string
  rating: number
  genre: string[]
  poster: string
  embedUrl: string
}

export default function MoviePage() {
  const params = useParams()
  const router = useRouter()
  const { user } = useAuthUser()
  const [movie, setMovie] = useState<Movie | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [fav, setFav] = useState(false)
  const [favLoading, setFavLoading] = useState(false)

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–ª—å–º
  useEffect(() => {
    const load = async () => {
      setLoading(true)
      try {
        const snap = await getDoc(doc(db, 'movies', params.id as string))
        if (snap.exists()) {
          const data = snap.data() as Omit<Movie, 'id'>
          setMovie({ id: params.id as string, ...data })
        } else {
          setError('–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω')
        }
      } catch (e) {
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å–º–∞')
      }
      setLoading(false)
    }
    load()
  }, [params.id])

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  useEffect(() => {
    if (!user) {
      setFav(false)
      return
    }
    const check = async () => {
      const userSnap = await getDoc(doc(db, 'users', user.uid))
      const data = userSnap.data() as { favorites?: string[] }
      setFav(data?.favorites?.includes(params.id as string) ?? false)
    }
    check()
  }, [user, params.id])

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  async function handleFavClick() {
    if (!user) {
      toast.info('–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ')
      return
    }
    setFavLoading(true)
    const userRef = doc(db, 'users', user.uid)
    try {
      const snap = await getDoc(userRef)
      if (!snap.exists()) {
        // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
        await setDoc(userRef, { favorites: [params.id] }, { merge: true })
        setFav(true)
        toast.success('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ')
      } else {
        const data = snap.data() as { favorites?: string[] }
        if (data?.favorites?.includes(params.id as string)) {
          await updateDoc(userRef, { favorites: arrayRemove(params.id) })
          setFav(false)
          toast.info('–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ')
        } else {
          await updateDoc(userRef, { favorites: arrayUnion(params.id) })
          setFav(true)
          toast.success('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ')
        }
      }
    } catch (e) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ')
    }
    setFavLoading(false)
  }

  if (loading) return <main className="p-6 text-white">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</main>
  if (error || !movie) return <main className="p-6 text-red-500">{error || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</main>

  return (
    <main className="p-6 bg-black text-white min-h-screen">
      <div className="flex flex-col md:flex-row items-start gap-8 mb-8">
        <img
          src={`/posters/${movie.poster}`}
          alt={movie.title}
          className="rounded-lg shadow-lg w-[220px] h-[330px] object-cover mx-auto md:mx-0"
        />
        <div className="flex-1 flex flex-col justify-between gap-4">
          <h1 className="text-3xl font-bold mb-2">
            {movie.title} <span className="text-gray-400">({movie.year})</span>
          </h1>
          <div className="text-xl mb-2">
            <span className="text-yellow-400">‚òÖ</span> –†–µ–π—Ç–∏–Ω–≥: {movie.rating}
          </div>
          <div className="text-lg mb-4">
            –ñ–∞–Ω—Ä—ã: <span className="text-gray-200">{movie.genre.join(', ')}</span>
          </div>
          <div className="flex gap-4">
            <button
              onClick={handleFavClick}
              disabled={favLoading}
              className={`px-5 py-2 rounded font-bold transition ${
                fav
                  ? 'bg-pink-600 hover:bg-pink-700'
                  : 'bg-blue-700 hover:bg-blue-800'
              }`}
            >
              {fav ? '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ ü§ç' : '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ü§ç'}
            </button>
            <button
              onClick={() => router.push('/')}
              className="bg-gray-700 hover:bg-gray-600 px-5 py-2 rounded font-bold transition"
            >
              ‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é
            </button>
          </div>
        </div>
      </div>

      {/* –í–∏–¥–µ–æ –Ω–∏–∂–µ —à–∞–ø–∫–∏ */}
      <div className="flex justify-center">
        {movie.embedUrl ? (
          <iframe
            src={movie.embedUrl}
            title={movie.title}
            width="900"
            height="506"
            allow="autoplay; encrypted-media; fullscreen; picture-in-picture"
            allowFullScreen
            frameBorder={0}
            className="rounded-xl bg-black shadow-xl w-full max-w-[900px] aspect-video"
          />
        ) : (
          <div className="text-center text-gray-400 p-12">–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</div>
        )}
      </div>
    </main>
  )
}